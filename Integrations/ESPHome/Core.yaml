substitutions:
  name: apollo-rly-1
  version: "25.2.27.1"
  device_description: ${name} made by Apollo Automation - version ${version}.

esp32:
  board: esp32-c6-devkitm-1
  variant: esp32c6
  #flash_size: 8MB
  framework:
    type: esp-idf
    version: 5.3.1
    platform_version: 6.9.0

# Time component required for total_daily_energy
time:
  - platform: homeassistant
    id: homeassistant_time
  - platform: sntp
    id: sntp_time
    timezone: America/New_York
    servers:
      - 0.pool.ntp.org
      - 1.pool.ntp.org
      - 2.pool.ntp.org
    on_time_sync:
      then:
        - logger.log: "Time synchronized with NTP server"
external_components:
  - source: github://PhracturedBlue/c6_adc
    refresh: 0s   # uncomment to force refresh of repo
api:

globals:
  # Voltage setting for power calculations - can be adjusted for different regions
  - id: line_voltage
    type: float
    restore_value: yes
    initial_value: '120.0'
  - id: cycleCounter
    type: int
    restore_value: no
    initial_value: '0'
  - id: button_press_timestamp
    restore_value: no
    type: uint32_t
    initial_value: '0'
  - id: runTest
    restore_value: yes
    type: bool
    initial_value: "true"

captive_portal:

web_server:
  port: 80

one_wire:
  - platform: gpio
    pin: GPIO15

switch:
  - platform: gpio
    name: "Relay"
    pin: GPIO14
    id: relay
  - platform: factory_reset
    id: factory_reset_switch
    internal: true
    
  - platform: template
    name: "Limit Protection"
    id: limit_protection
    icon: mdi:shield
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: "config"
    turn_on_action:
      - logger.log: "Limit protection enabled"
    turn_off_action:
      - logger.log: "Limit protection disabled"

sensor:
  - platform: dallas_temp
    name: "Temperature Probe"
    update_interval: 5s
    id: temp_probe
    
  # ACS733KLATR-40AB-T Current Sensor
  - platform: c6_adc
    pin: GPIO2
    name: "Current Raw"
    id: current_raw
    update_interval: 1s
    attenuation: 12db
    internal: true
    
  - platform: template
    name: "Current Measurement"
    id: current_measurement
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 2
    update_interval: 1s
    filters:
      - calibrate_linear:
          # Fine-tune these values after installation for better accuracy
          - 0.0 -> 0.0  # Offset
          - 3.0 -> 3.0  # No calibration adjustment initially
      - sliding_window_moving_average:
          window_size: 10
          send_every: 1
      - filter_out: nan
    lambda: |-
      // Convert ADC reading to current
      // For ACS733KLATR-40AB-T:
      // - Zero current is at VCC/2 (typically 1.65V for 3.3V VCC)
      // - Sensitivity is 33 mV/A for the 40AB variant
      // - Measurement range is Â±40A
      
      float adc_voltage = id(current_raw).state * 3.3 / 4095.0; // Convert to voltage (for 12-bit ADC and 3.3V reference)
      float zero_current_voltage = 3.3 / 2.0; // Midpoint voltage (zero current)
      float sensitivity = 0.033; // 33 mV/A for the 40AB variant
      
      // Calculate current in Amperes
      return (adc_voltage - zero_current_voltage) / sensitivity;
  
  # Power calculation (assuming 120V AC)
  - platform: template
    name: "Power Usage"
    id: power_usage
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 1
    update_interval: 1s
    lambda: |-
      if (id(current_measurement).state > 0) {
        // Use configurable line voltage for calculation
        return id(current_measurement).state * id(line_voltage);
      } else {
        return 0.0;
      }
      
  # Energy monitoring
  - platform: total_daily_energy
    name: "Daily Energy"
    power_id: power_usage
    filters:
      - multiply: 0.001  # Convert to kWh
    unit_of_measurement: kWh
    device_class: energy
    time_id: sntp_time     # Use the time component we added

binary_sensor:
  - platform: status
    name: Online
    id: ink_ha_connected
  - platform: gpio
    name: Limit Triggered
    id: limit_triggered
    icon: mdi:connection
    pin: 
      number: GPIO5
      mode:
        input: true
        pulldown: True
    filters:
      - invert:
    on_state:
      then:
        - if:
            condition:
              and:
                - binary_sensor.is_on: limit_triggered
                - switch.is_on: limit_protection
            then:
              - switch.turn_off: relay
              - logger.log: "Limit triggered - turning off relay"
  # ACS733 Fault Pin
  - platform: gpio
    pin:
      number: GPIO6
      mode:
        input: true
        pullup: true
    name: "Current Sensor Fault"
    id: current_sensor_fault
    device_class: problem
    on_press:
      then:
        - logger.log: "Current sensor fault detected!"
        # Optional: Turn off relay for safety if there's a fault
        # - switch.turn_off: relay
    
  - platform: gpio
    pin:
      number: GPIO9
      inverted: true
      mode:
        input: true
        pullup: true
    id: reset_button
    on_press:
      then:
        - lambda: |-
            id(button_press_timestamp) = millis();    
    on_release:
      then:
        - lambda: |-
            if (millis() - id(button_press_timestamp) >= 10000) {
              // Remove Wifi
              id(runTest) = true;
              id(factory_reset_switch).turn_on();
            }
            else {
              // StatusCheck
              id(statusCheck).execute();
              delay(3000);
              id(runTest) = true;
              id(testScript).execute();
            }

light:
  - platform: esp32_rmt_led_strip
    id: rgb_light
    name: "RGB Light"
    pin: GPIO3
    default_transition_length: 0s
    chipset: WS2812
    num_leds: 1
    rgb_order: grb
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 1000ms
          update_interval: 1000ms
          min_brightness: 0%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%

button:
  - platform: restart
    icon: mdi:power-cycle
    name: "ESP Reboot"
    
  - platform: template
    name: "Calibrate Current Sensor"
    icon: mdi:scale-balance
    on_press:
      - script.execute: zero_calibration

script:
  - id: statusCheck
    then:
      - if:
          condition:
            - lambda: 'return id(ink_ha_connected).state;'
          then:
            - logger.log: "Apollo Automation: Connected To HA"
            - light.turn_on: 
                id: rgb_light
                brightness: 100%
                red: 0%
                green: 0%
                blue: 100%
          else:
            - if:
                condition:
                  - wifi.connected
                then:
                  - logger.log: "Apollo Automation: Connected To Wifi"
                  - light.turn_on: 
                      id: rgb_light
                      brightness: 100%
                      red: 0%
                      green: 100%
                      blue: 0%
                else: 
                  - logger.log: "Apollo Automation: Not Connected To Wifi"
                  - light.turn_on: 
                      id: rgb_light
                      brightness: 100%
                      red: 100%
                      green: 100%
                      blue: 100%  

  - id: testScript
    then:
      if: 
        condition:
          - lambda: "return id(runTest) == true;"
        then:
          - lambda: "id(runTest) = false;"
          - light.turn_on:
              id: rgb_light
              red: 0%
              green: 100%
              blue: 0%
          - delay: 5s
          - light.turn_on:
              id: rgb_light
              red: 0%
              green: 0%
              blue: 0%
          - light.turn_off:
              id: rgb_light
              
  - id: zero_calibration
    then:
      - logger.log: "Performing current sensor zero calibration..."
      - lambda: |-
          // Store current zero-current voltage reading for calibration
          // This should be done when no current is flowing through the sensor
          float adc_voltage = id(current_raw).state * 3.3 / 4095.0;
          ESP_LOGI("current_sensor", "Zero current voltage: %.3fV", adc_voltage);
      - logger.log: "Zero calibration completed. Check logs for values."